import cv2
import numpy as np
import time

# Distance constants
KNOWN_DISTANCE = 400  # CM
Car_WIDTH = 173  # CM

# Object detector constant
CONFIDENCE_THRESHOLD = 0.4
NMS_THRESHOLD = 0.3

# Colors for object detected
COLORS = [(255, 0, 0), (255, 0, 255), (0, 255, 255), (255, 255, 0), (0, 255, 0), (255, 0, 0), (0, 0, 255)]
GREEN = (0, 255, 0)
BLACK = (0, 0, 0)
RED = (0, 0, 255)

# Defining fonts
FONTS = cv2.FONT_HERSHEY_COMPLEX

# Getting class names from classes.txt file
class_names = []
with open("classes.txt", "r") as f:
    class_names = [cname.strip() for cname in f.readlines()]

# Setting up OpenCV net
yoloNet = cv2.dnn.readNet('yolov4-tiny.weights', 'yolov4-tiny.cfg')
yoloNet.setPreferableBackend(cv2.dnn.DNN_BACKEND_CUDA)
yoloNet.setPreferableTarget(cv2.dnn.DNN_TARGET_CUDA_FP16)

model = cv2.dnn_DetectionModel(yoloNet)
model.setInputParams(size=(416, 416), scale=1/255, swapRB=True)

# Object detector function/method
def object_detector(image):
    classes, scores, boxes = model.detect(image, CONFIDENCE_THRESHOLD, NMS_THRESHOLD)
    # Creating an empty list to add object data
    data_list = []
    for (classid, score, box) in zip(classes, scores, boxes):
        # Define color of each object based on its class id
        color = COLORS[int(classid) % len(COLORS)]
        label = "%s : %f" % (class_names[classid[0]], score)

        # Draw rectangle and label on object
        cv2.rectangle(image, box, color, 2)
        cv2.putText(image, label, (box[0], box[1] - 14), FONTS, 0.5, color, 2)

        # Getting the data
        if classid == 0:  # Person class id
            data_list.append([class_names[classid[0]], box[2], (box[0], box[1] - 2)])
        # If you want to include more classes, add more [elif] statements here
    return data_list

def focal_length_finder(measured_distance, real_width, width_in_rf):
    focal_length = (width_in_rf * measured_distance) / real_width
    return focal_length

def distance_finder(focal_length, real_object_width, width_in_frame):
    distance = (real_object_width * focal_length) / width_in_frame
    return distance

# Reading the reference image from the directory
ref_car = cv2.imread('ReferenceImages/image1.png')
car_data = object_detector(ref_car)

if len(car_data) > 0:
    car_width_in_rf = car_data[0][1]
    print(f"Car rear width in pixels: {car_width_in_rf}")
    focal_car = focal_length_finder(KNOWN_DISTANCE, Car_WIDTH, car_width_in_rf)
else:
    print("No cars detected in the reference image.")

cap = cv2.VideoCapture(0)

fps_frame_count = 0
fps_start_time = time.time()

while True:
    ret, frame = cap.read()

    data = object_detector(frame)
    for d in data:
        if d[0] == 'car':
            distance = distance_finder(focal_car, Car_WIDTH, d[1])
            x, y = d[2]
        cv2.rectangle(frame, (x, y - 3), (x + 150, y + 23), BLACK, -1)
        cv2.putText(frame, f'Dis: {round(distance, 2)} Cm', (x + 5, y + 13), FONTS, 0.48, GREEN, 2)

    cv2.imshow('frame', frame)

    # Print the warning message to indicate the system taking the input from the camera
    if len(car_data) > 0:
        if distance > 550:
            print(f"Warning: Distance is more than 550!")
        elif 400 <= distance <= 500:
            print(f"Warning: Distance is between 400 and 500!")
        else:
            print(f"It's a safe distance")
    else:
        print("No cars detected in the reference image.")

    fps_frame_count += 1
    if fps_frame_count >= 10:
        fps_end_time = time.time()
        fps = fps_frame_count / (fps_end_time - fps_start_time)
        print("FPS: {:.2f}".format(fps))
        fps_frame_count = 0
        fps_start_time = fps_end_time

    key = cv2.waitKey(1)
    if key == ord('q'):
        break

cv2.destroyAllWindows()
cap.release()
